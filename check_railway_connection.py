#!/usr/bin/env python3
"""
Railway Connection Checker –¥–ª—è DAO Treasury Monitor
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ Railway PostgreSQL
"""

import os
import sys
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("="*50)
    
    required_vars = [
        'TELEGRAM_BOT_TOKEN',
        'TELEGRAM_CHAT_ID', 
        'HELIUS_API_KEY',
        'COINGECKO_API_KEY'
    ]
    
    optional_vars = [
        'DATABASE_URL',
        'ETHEREUM_RPC_URL',
        'BITQUERY_API_KEY',
        'RAILWAY_ENVIRONMENT'
    ]
    
    print("‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"  {var}: {'*' * 10}...{value[-4:] if len(value) > 4 else '****'}")
        else:
            print(f"  {var}: ‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
    
    print("\nüîß –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    for var in optional_vars:
        value = os.getenv(var)
        if value:
            if var == 'DATABASE_URL':
                print(f"  {var}: {'*' * 20}...{value[-10:] if len(value) > 10 else '****'}")
            else:
                print(f"  {var}: {'*' * 10}...{value[-4:] if len(value) > 4 else '****'}")
        else:
            print(f"  {var}: ‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("="*50)
    
    database_url = os.getenv('DATABASE_URL')
    
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("   –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é SQLite –±–∞–∑—É")
        return False
    
    print(f"‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω–∞: {database_url[:30]}...{database_url[-10:]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL –º–æ–¥—É–ª—å
    try:
        import psycopg2
        print("‚úÖ psycopg2 –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("‚ùå psycopg2 –º–æ–¥—É–ª—å –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip3 install psycopg2-binary")
        return False
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
    try:
        from database.postgresql_database import PostgreSQLDatabase
        db = PostgreSQLDatabase(database_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = db.get_database_stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   üí∞ Treasury Transactions: {stats.get('treasury_transactions', 0)}")
        print(f"   üö® Alerts: {stats.get('alerts', 0)}")
        print(f"   üíé Token Prices: {stats.get('token_prices', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False

def check_system_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\nüöÄ –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
    modules_to_check = [
        ('database.database', 'DAOTreasuryDatabase'),
        ('database.postgresql_database', 'PostgreSQLDatabase'),
        ('monitors.price_tracker', 'PriceTracker'),
        ('monitors.solana_monitor', 'SolanaMonitor'),
        ('monitors.ethereum_monitor', 'EthereumMonitor'),
        ('notifications.telegram_bot', 'TelegramBot')
    ]
    
    for module_name, class_name in modules_to_check:
        try:
            module = __import__(module_name, fromlist=[class_name])
            getattr(module, class_name)
            print(f"‚úÖ {class_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError as e:
            print(f"‚ùå {class_name} –ù–ï –î–û–°–¢–£–ü–ï–ù: {e}")
        except AttributeError:
            print(f"‚ùå {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥—É–ª–µ {module_name}")

def generate_railway_instructions():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è Railway"""
    print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø RAILWAY SETUP")
    print("="*50)
    
    database_url = os.getenv('DATABASE_URL')
    
    if database_url:
        print("‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å DATABASE_URL - —Ö–æ—Ä–æ—à–æ!")
        print("\nüîß –®–∞–≥–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Railway:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Railway dashboard")
        print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ–µ–∫—Ç 'bio-lp'")
        print("3. –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª Variables")
        print("4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ DATABASE_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:")
        print(f"   DATABASE_URL={database_url[:30]}...{database_url[-10:]}")
        print("5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ deployment")
    else:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ")
        print("\nüîß –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:")
        print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ DATABASE_URL –∏–∑ Railway PostgreSQL")
        print("2. –î–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ –ø—Ä–æ–µ–∫—Ç bio-lp Variables:")
        print("   - –û—Ç–∫—Ä–æ–π—Ç–µ Railway dashboard")
        print("   - –ü—Ä–æ–µ–∫—Ç bio-lp -> Variables")
        print("   - –î–æ–±–∞–≤—å—Ç–µ DATABASE_URL = –≤–∞—à–∞_—Å—Å—ã–ª–∫–∞_postgresql")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ deployment")
    
    print("\nüöÇ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print("   railwaydb                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
    print("   dbrailwaystats              # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Railway –ë–î")
    print("   python3 check_railway_connection.py  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ DAO Treasury Monitor - Railway Connection Checker")
    print("="*60)
    print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    check_environment_variables()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_connected = check_database_connection()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    check_system_status()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    generate_railway_instructions()
    
    print("\n" + "="*60)
    if db_connected:
        print("‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï –° RAILWAY POSTGRESQL!")
    else:
        print("‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê RAILWAY POSTGRESQL")
    print("="*60)

if __name__ == "__main__":
    main() 