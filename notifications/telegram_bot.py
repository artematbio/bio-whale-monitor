#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è DAO Treasury Monitor
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏ —Ü–µ–Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
"""

import os
import logging
import asyncio
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, List, Optional
from decimal import Decimal

from telegram import Bot
from telegram.error import TelegramError
import httpx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, bot_token: Optional[str] = None, chat_id: Optional[str] = None):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.bot_token = bot_token or os.getenv('TELEGRAM_BOT_TOKEN')
        self.chat_id = chat_id or os.getenv('TELEGRAM_CHAT_ID')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not self.bot_token:
            logger.warning("TELEGRAM_BOT_TOKEN not set - Telegram notifications disabled")
            self.enabled = False
            return
        
        if not self.chat_id:
            logger.warning("TELEGRAM_CHAT_ID not set - Telegram notifications disabled")
            self.enabled = False
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        try:
            self.bot = Bot(token=self.bot_token)
            self.enabled = True
            logger.info(f"Telegram notifier initialized for chat: {self.chat_id}")
        except Exception as e:
            logger.error(f"Failed to initialize Telegram bot: {e}")
            self.enabled = False
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API"""
        if not self.enabled:
            return False
        
        try:
            bot_info = await self.bot.get_me()
            logger.info(f"Telegram bot connected: @{bot_info.username}")
            return True
        except Exception as e:
            logger.error(f"Telegram connection test failed: {e}")
            return False
    
    def format_transaction_alert(self, alert_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–ª–µ—Ä—Ç –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è Telegram"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            dao_name = alert_data.get('dao_name', 'Unknown DAO')
            amount_usd = alert_data.get('amount_usd', 0)
            tx_hash = alert_data.get('tx_hash', '')
            severity = alert_data.get('severity', 'medium')
            
            # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            severity_emoji = {
                'low': 'üü¢',
                'medium': 'üü°', 
                'high': 'üî¥',
                'critical': 'üö®'
            }.get(severity, '‚ö†Ô∏è')
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = f"{severity_emoji} **{alert_data.get('title', 'Treasury Alert')}**\n\n"
            message += f"üèõÔ∏è **DAO:** {dao_name}\n"
            message += f"üí∞ **Amount:** ${amount_usd:,.2f}\n"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ metadata
            metadata = alert_data.get('metadata', {})
            if isinstance(metadata, dict):
                if 'token_symbol' in metadata:
                    token_amount = metadata.get('token_amount', 0)
                    token_symbol = metadata.get('token_symbol', '')
                    message += f"ü™ô **Token:** {token_amount:,.2f} {token_symbol}\n"
                
                if 'blockchain' in metadata:
                    message += f"‚õìÔ∏è **Chain:** {metadata['blockchain'].title()}\n"
                
                if 'tx_type' in metadata:
                    tx_type = metadata['tx_type']
                    direction_emoji = 'üì§' if tx_type == 'outgoing' else 'üì•'
                    message += f"{direction_emoji} **Type:** {tx_type.title()}\n"
            
            # –í—Ä–µ–º—è
            timestamp = alert_data.get('timestamp')
            if timestamp:
                if isinstance(timestamp, str):
                    timestamp = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                elif isinstance(timestamp, datetime):
                    pass
                message += f"‚è∞ **Time:** {timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')}\n"
            
            # –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π)
            if tx_hash:
                short_hash = f"{tx_hash[:8]}...{tx_hash[-8:]}" if len(tx_hash) > 20 else tx_hash
                message += f"üîó **TX:** `{short_hash}`\n"
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            description = alert_data.get('message', '')
            if description:
                message += f"\nüìù **Details:** {description}"
            
            return message
            
        except Exception as e:
            logger.error(f"Error formatting transaction alert: {e}")
            return f"‚ö†Ô∏è Alert formatting error: {alert_data.get('title', 'Unknown alert')}"
    
    def format_price_alert(self, alert_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω–æ–≤–æ–π –∞–ª–µ—Ä—Ç –¥–ª—è Telegram"""
        try:
            dao_name = alert_data.get('dao_name', 'Unknown DAO')
            token_symbol = alert_data.get('token_symbol', 'TOKEN')
            alert_type = alert_data.get('alert_type', 'price_change')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç –ø–æ —Ç–∏–ø—É –∞–ª–µ—Ä—Ç–∞
            if alert_type == 'price_drop':
                emoji = 'üìâ'
                color = 'üî¥'
            elif alert_type == 'price_spike':
                emoji = 'üìà'
                color = 'üü¢'
            else:
                emoji = 'üìä'
                color = 'üü°'
            
            message = f"{color} {emoji} Price Alert - {token_symbol}\n\n"
            message += f"üèõÔ∏è DAO: {dao_name}\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫—á–µ–π–Ω –∏–∑ metadata
            metadata = alert_data.get('metadata', {})
            if isinstance(metadata, dict):
                blockchain = metadata.get('blockchain', '')
                if blockchain:
                    message += f"‚õìÔ∏è Chain: {blockchain}\n"
            
            # –í—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ
            timestamp = alert_data.get('timestamp')
            if timestamp:
                if isinstance(timestamp, str):
                    timestamp = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                elif isinstance(timestamp, datetime):
                    pass
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ metadata
                moscow_time_str = metadata.get('moscow_time') if isinstance(metadata, dict) else None
                if moscow_time_str:
                    message += f"‚è∞ Time: {moscow_time_str} UTC+3\n"
                else:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                    moscow_tz = timezone(timedelta(hours=3))
                    if timestamp.tzinfo is None:
                        timestamp = timestamp.replace(tzinfo=timezone.utc)
                    moscow_time = timestamp.astimezone(moscow_tz)
                    message += f"‚è∞ Time: {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} UTC+3\n"
            
            # –û–ø–∏—Å–∞–Ω–∏–µ (–∑–¥–µ—Å—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö)
            description = alert_data.get('message', '')
            if description:
                message += f"\nüìù Details: {description}"
            
            return message
            
        except Exception as e:
            logger.error(f"Error formatting price alert: {e}")
            return f"‚ö†Ô∏è Price alert formatting error: {alert_data.get('title', 'Unknown alert')}"
    
    def format_generic_alert(self, alert_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—â–∏–π –∞–ª–µ—Ä—Ç –¥–ª—è Telegram"""
        try:
            alert_type = alert_data.get('alert_type', 'general')
            severity = alert_data.get('severity', 'medium')
            title = alert_data.get('title', 'Alert')
            message_text = alert_data.get('message', '')
            dao_name = alert_data.get('dao_name', '')
            
            # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            severity_emoji = {
                'low': 'üü¢',
                'medium': 'üü°', 
                'high': 'üî¥',
                'critical': 'üö®'
            }.get(severity, '‚ö†Ô∏è')
            
            message = f"{severity_emoji} **{title}**\n\n"
            
            if dao_name:
                message += f"üèõÔ∏è **DAO:** {dao_name}\n"
            
            if message_text:
                message += f"üìù **Message:** {message_text}\n"
            
            # –í—Ä–µ–º—è
            timestamp = alert_data.get('timestamp')
            if timestamp:
                if isinstance(timestamp, str):
                    timestamp = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                elif isinstance(timestamp, datetime):
                    pass
                message += f"‚è∞ **Time:** {timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')}"
            
            return message
            
        except Exception as e:
            logger.error(f"Error formatting generic alert: {e}")
            return f"‚ö†Ô∏è Alert: {alert_data.get('title', 'Unknown alert')}"
    
    async def send_alert(self, alert_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –≤ Telegram"""
        if not self.enabled:
            logger.debug("Telegram notifications disabled, skipping alert")
            return False
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            alert_type = alert_data.get('alert_type', 'general')
            
            if alert_type in ['large_transaction', 'treasury_transaction']:
                message = self.format_transaction_alert(alert_data)
            elif alert_type in ['price_drop', 'price_spike', 'price_change']:
                message = self.format_price_alert(alert_data)
            else:
                message = self.format_generic_alert(alert_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
            logger.info(f"Telegram alert sent: {alert_data.get('title', 'Unknown')}")
            return True
            
        except TelegramError as e:
            logger.error(f"Telegram API error: {e}")
            return False
        except Exception as e:
            logger.error(f"Error sending Telegram alert: {e}")
            return False
    
    async def send_daily_summary(self, summary_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É"""
        if not self.enabled:
            return False
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É
            date = summary_data.get('date', datetime.now().strftime('%Y-%m-%d'))
            total_transactions = summary_data.get('total_transactions', 0)
            total_volume_usd = summary_data.get('total_volume_usd', 0)
            active_daos = summary_data.get('active_daos', [])
            top_transactions = summary_data.get('top_transactions', [])
            
            message = f"üìä **Daily DAO Treasury Summary - {date}**\n\n"
            message += f"üìà **Total Transactions:** {total_transactions}\n"
            message += f"üí∞ **Total Volume:** ${total_volume_usd:,.2f}\n"
            message += f"üèõÔ∏è **Active DAOs:** {len(active_daos)}\n"
            
            if active_daos:
                message += f"\nüéØ **Most Active DAOs:**\n"
                for dao in active_daos[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 5
                    dao_name = dao.get('dao_name', 'Unknown')
                    dao_volume = dao.get('volume_usd', 0)
                    dao_tx_count = dao.get('transaction_count', 0)
                    message += f"  ‚Ä¢ {dao_name}: {dao_tx_count} tx, ${dao_volume:,.2f}\n"
            
            if top_transactions:
                message += f"\nüîù **Largest Transactions:**\n"
                for i, tx in enumerate(top_transactions[:3], 1):  # –¢–æ–ø 3
                    dao_name = tx.get('dao_name', 'Unknown')
                    amount_usd = tx.get('amount_usd', 0)
                    token_symbol = tx.get('token_symbol', 'TOKEN')
                    message += f"  {i}. {dao_name}: ${amount_usd:,.2f} ({token_symbol})\n"
            
            message += f"\nü§ñ *Generated by DAO Treasury Monitor*"
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode='Markdown'
            )
            
            logger.info(f"Daily summary sent to Telegram")
            return True
            
        except Exception as e:
            logger.error(f"Error sending daily summary: {e}")
            return False
    
    async def send_test_message(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not self.enabled:
            logger.warning("Telegram notifications not enabled")
            return False
        
        try:
            test_message = (
                "ü§ñ **DAO Treasury Monitor - Test Message**\n\n"
                f"‚úÖ Telegram integration is working!\n"
                f"‚è∞ Test time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}\n\n"
                f"You will receive alerts for:\n"
                f"‚Ä¢ üì§ Large treasury transactions (>$10K)\n"
                f"‚Ä¢ üìâ Significant price drops\n"
                f"‚Ä¢ üìà Major price spikes\n"
                f"‚Ä¢ üìä Daily activity summaries\n\n"
                f"üîß Monitoring is now active!"
            )
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=test_message,
                parse_mode='Markdown'
            )
            
            logger.info("Test message sent to Telegram")
            return True
            
        except Exception as e:
            logger.error(f"Error sending test message: {e}")
            return False

    async def send_message(self, message: str, parse_mode: str = 'Markdown') -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.enabled:
            logger.warning("Telegram notifications not enabled")
            return False
        
        try:
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode=parse_mode,
                disable_web_page_preview=True
            )
            
            logger.info("Message sent to Telegram successfully")
            return True
            
        except TelegramError as e:
            logger.error(f"Telegram API error: {e}")
            return False
        except Exception as e:
            logger.error(f"Error sending message to Telegram: {e}")
            return False

# –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è
def create_telegram_notifier(bot_token: Optional[str] = None, chat_id: Optional[str] = None) -> TelegramNotifier:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è"""
    return TelegramNotifier(bot_token, chat_id)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞
async def send_telegram_alert(alert_data: Dict[str, Any], 
                             bot_token: Optional[str] = None, 
                             chat_id: Optional[str] = None) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
    notifier = create_telegram_notifier(bot_token, chat_id)
    if notifier.enabled:
        return await notifier.send_alert(alert_data)
    return False 