#!/usr/bin/env python3
"""
BIO Whale Monitor
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä—É–ø–Ω—ã—Ö –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BIO –∏ vBIO —Ç–æ–∫–µ–Ω–æ–≤
"""

import asyncio
import logging
import time
from typing import List, Dict, Any, Optional
from datetime import datetime, timezone
from web3 import Web3
from web3.contract import Contract
import json

from config.whale_config import (
    BIO_TOKENS, 
    WHALE_THRESHOLDS, 
    MONITORED_WALLETS,
    MONITORING_CONFIG
)
from utils.price_utils import get_bio_token_price, format_price
from notifications.notification_system import NotificationSystem

# ERC-20 Token ABI (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤)
ERC20_ABI = [
    {
        "anonymous": False,
        "inputs": [
            {"indexed": True, "name": "from", "type": "address"},
            {"indexed": True, "name": "to", "type": "address"},
            {"indexed": False, "name": "value", "type": "uint256"}
        ],
        "name": "Transfer",
        "type": "event"
    },
    {
        "constant": True,
        "inputs": [],
        "name": "decimals",
        "outputs": [{"name": "", "type": "uint8"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": True,
        "inputs": [],
        "name": "symbol",
        "outputs": [{"name": "", "type": "string"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function"
    }
]

class BIOWhaleMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä—É–ø–Ω—ã—Ö –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BIO –∏ vBIO —Ç–æ–∫–µ–Ω–æ–≤"""
    
    def __init__(self, ethereum_rpc_url: str, database, notification_system: NotificationSystem):
        self.logger = logging.getLogger(self.__class__.__name__)
        self.database = database
        self.notification_system = notification_system
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3
        try:
            self.w3 = Web3(Web3.HTTPProvider(ethereum_rpc_url))
            if not self.w3.is_connected():
                raise Exception("Cannot connect to Ethereum RPC")
            self.logger.info(f"‚úÖ Connected to Ethereum RPC: {ethereum_rpc_url[:50]}...")
        except Exception as e:
            self.logger.error(f"‚ùå Failed to connect to Ethereum RPC: {e}")
            raise
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
        self.token_contracts = {}
        self._initialize_token_contracts()
        
        # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        self.last_processed_blocks = {}
        
        # –ö—ç—à —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
        self.price_cache = {}
        self.last_price_update = 0
    
    def _initialize_token_contracts(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ BIO —Ç–æ–∫–µ–Ω–æ–≤"""
        for token_key, token_info in BIO_TOKENS.items():
            try:
                contract_address = Web3.to_checksum_address(token_info['contract_address'])
                contract = self.w3.eth.contract(
                    address=contract_address,
                    abi=ERC20_ABI
                )
                self.token_contracts[token_key] = {
                    'contract': contract,
                    'info': token_info
                }
                self.logger.info(f"‚úÖ Initialized {token_key} contract: {contract_address}")
            except Exception as e:
                self.logger.error(f"‚ùå Failed to initialize {token_key} contract: {e}")
    
    async def _update_token_prices(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤"""
        current_time = time.time()
        if current_time - self.last_price_update < 300:  # 5 –º–∏–Ω—É—Ç
            return
        
        try:
            self.logger.info("üí∞ Updating token prices...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É BIO —Ç–æ–∫–µ–Ω–∞
            bio_price = get_bio_token_price('ethereum')
            if bio_price:
                self.price_cache['BIO'] = bio_price
                self.price_cache['vBIO'] = bio_price  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ vBIO = BIO
                self.logger.info(f"üí∞ Updated BIO price: ${format_price(bio_price)}")
            
            self.last_price_update = current_time
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to update token prices: {e}")
    
    def _calculate_usd_value(self, token_symbol: str, token_amount: float) -> float:
        """–†–∞—Å—á–µ—Ç USD —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        if token_symbol in self.price_cache:
            return token_amount * self.price_cache[token_symbol]
        return 0.0
    
    async def _check_whale_transaction(self, token_key: str, tx_hash: str, from_address: str, 
                                     to_address: str, amount_raw: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ whale –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        try:
            token_info = BIO_TOKENS[token_key]
            decimals = token_info['decimals']
            token_amount = amount_raw / (10 ** decimals)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            meets_token_threshold = token_amount >= WHALE_THRESHOLDS['token_amount']
            
            usd_value = self._calculate_usd_value(token_info['symbol'], token_amount)
            meets_usd_threshold = usd_value >= WHALE_THRESHOLDS['usd_amount']
            
            if meets_token_threshold or meets_usd_threshold:
                self.logger.info(f"üêã WHALE TRANSACTION DETECTED!")
                self.logger.info(f"   Token: {token_info['symbol']}")
                self.logger.info(f"   Amount: {token_amount:,.2f} tokens")
                self.logger.info(f"   USD Value: ${usd_value:,.2f}")
                self.logger.info(f"   From: {from_address}")
                self.logger.info(f"   To: {to_address}")
                self.logger.info(f"   TX: {tx_hash}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self._save_whale_transaction(
                    tx_hash, token_key, from_address, to_address, 
                    token_amount, usd_value
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await self._send_whale_alert(
                    tx_hash, token_info, from_address, to_address,
                    token_amount, usd_value
                )
                
                return True
            
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Error checking whale transaction: {e}")
            return False
    
    async def _save_whale_transaction(self, tx_hash: str, token_key: str, 
                                    from_address: str, to_address: str,
                                    token_amount: float, usd_value: float):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ whale —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if self.database.is_duplicate_transaction(tx_hash):
                self.logger.debug(f"‚ö†Ô∏è Duplicate whale transaction skipped: {tx_hash}")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction_data = {
                'transaction_hash': tx_hash,
                'from_address': from_address,
                'to_address': to_address,
                'token_symbol': BIO_TOKENS[token_key]['symbol'],
                'token_amount': token_amount,
                'usd_value': usd_value,
                'transaction_type': 'whale_transfer',
                'timestamp': datetime.now(timezone.utc),
                'block_number': None  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
            }
            
            self.database.save_transaction(transaction_data)
            self.logger.info(f"üíæ Saved whale transaction to database: {tx_hash[:16]}...")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to save whale transaction: {e}")
    
    async def _send_whale_alert(self, tx_hash: str, token_info: Dict, 
                              from_address: str, to_address: str,
                              token_amount: float, usd_value: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ whale —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""üêã **WHALE ALERT: Large {token_info['symbol']} Transfer**

üí∞ **Amount:** {token_amount:,.2f} {token_info['symbol']}
üíµ **USD Value:** ${usd_value:,.2f}

üì§ **From:** `{from_address}`
üì• **To:** `{to_address}`

üîó **Transaction:** `{tx_hash}`
üåê **Etherscan:** https://etherscan.io/tx/{tx_hash}

‚è∞ **Time:** {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')}

üö® **Alert Triggered:** {'Token amount' if token_amount >= WHALE_THRESHOLDS['token_amount'] else 'USD value'} threshold exceeded"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if self.notification_system:
                success = await self.notification_system.send_alert(
                    title=f"üêã {token_info['symbol']} Whale Alert",
                    message=message,
                    alert_type="whale_transaction"
                )
                
                if success:
                    self.logger.info(f"üì® Whale alert sent successfully")
                else:
                    self.logger.warning(f"‚ùå Failed to send whale alert")
            
        except Exception as e:
            self.logger.error(f"‚ùå Failed to send whale alert: {e}")
    
    async def _scan_token_transfers(self, token_key: str, from_block: int, to_block: int):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        try:
            token_data = self.token_contracts[token_key]
            contract = token_data['contract']
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è Transfer
            transfer_filter = contract.events.Transfer.create_filter(
                fromBlock=from_block,
                toBlock=to_block
            )
            
            events = transfer_filter.get_all_entries()
            whale_count = 0
            
            for event in events:
                from_address = event['args']['from']
                to_address = event['args']['to']
                amount = event['args']['value']
                tx_hash = event['transactionHash'].hex()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
                if from_address.lower() in [w.lower() for w in MONITORED_WALLETS]:
                    is_whale = await self._check_whale_transaction(
                        token_key, tx_hash, from_address, to_address, amount
                    )
                    if is_whale:
                        whale_count += 1
            
            if whale_count > 0:
                self.logger.info(f"üêã Found {whale_count} whale transactions for {token_key}")
                
        except Exception as e:
            self.logger.error(f"‚ùå Error scanning {token_key} transfers: {e}")
    
    async def run_whale_monitoring_cycle(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ whale —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            if not MONITORED_WALLETS:
                self.logger.warning("‚ö†Ô∏è No wallets configured for monitoring")
                return
            
            self.logger.info("üêã Starting whale monitoring cycle...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
            await self._update_token_prices()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
            current_block = self.w3.eth.block_number
            lookback_blocks = MONITORING_CONFIG['blocks_lookback']
            from_block = max(1, current_block - lookback_blocks)
            
            self.logger.info(f"üîç Scanning blocks {from_block} to {current_block}")
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
            for token_key in self.token_contracts.keys():
                self.logger.info(f"üîç Scanning {token_key} transfers...")
                await self._scan_token_transfers(token_key, from_block, current_block)
            
            self.logger.info("‚úÖ Whale monitoring cycle completed")
            
        except Exception as e:
            self.logger.error(f"‚ùå Error in whale monitoring cycle: {e}")
            import traceback
            self.logger.error(f"Traceback: {traceback.format_exc()}")
    
    def get_monitoring_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            'monitored_wallets': len(MONITORED_WALLETS),
            'monitored_tokens': len(self.token_contracts),
            'token_threshold': WHALE_THRESHOLDS['token_amount'],
            'usd_threshold': WHALE_THRESHOLDS['usd_amount'],
            'check_interval': MONITORING_CONFIG['check_interval'],
            'price_cache_age': time.time() - self.last_price_update if self.last_price_update else 0
        } 