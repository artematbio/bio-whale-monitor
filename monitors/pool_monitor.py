#!/usr/bin/env python3
"""
Pool Monitor –¥–ª—è DAO Treasury Monitor
–ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—É–ª–∞—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ DAO:
- –ö—Ä—É–ø–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ DAO/BIO —Ç–æ–∫–µ–Ω–æ–≤ > $10K
- –°—É–º–º–∞—Ä–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ DAO/BIO –∑–∞ –¥–µ–Ω—å > $10K  
- Add/remove liquidity > $10K
"""

import asyncio
import logging
import time
import httpx
import json
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from decimal import Decimal
from dataclasses import dataclass

from config.dao_config import ALL_DAOS, SOLANA_DAOS, ETHEREUM_DAOS, get_all_pool_addresses, BIO_TOKEN_SOLANA, BIO_TOKEN_ETHEREUM
from database.database import DAOTreasuryDatabase
from utils.price_utils import get_multiple_token_prices

logger = logging.getLogger(__name__)

@dataclass
class PoolActivityInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—É–ª–µ"""
    tx_hash: str
    timestamp: datetime
    dao_name: str
    blockchain: str
    pool_address: str
    activity_type: str  # 'swap_sell', 'swap_buy', 'add_liquidity', 'remove_liquidity'
    token0_address: Optional[str] = None
    token1_address: Optional[str] = None
    token0_symbol: Optional[str] = None
    token1_symbol: Optional[str] = None
    token0_amount: Decimal = Decimal('0')
    token1_amount: Decimal = Decimal('0')
    total_usd_value: Decimal = Decimal('0')
    dao_token_sold: bool = False  # –§–ª–∞–≥ –ø—Ä–æ–¥–∞–∂–∏ DAO —Ç–æ–∫–µ–Ω–∞
    bio_token_sold: bool = False  # –§–ª–∞–≥ –ø—Ä–æ–¥–∞–∂–∏ BIO —Ç–æ–∫–µ–Ω–∞
    metadata: Dict[str, Any] = None

class PoolMonitor:
    """–ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—É–ª–∞—Ö –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ DAO"""
    
    def __init__(self, database: DAOTreasuryDatabase):
        self.database = database
        self.http_client = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.check_interval = 60  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        self.alert_threshold = Decimal("10000")  # $10,000 –ø–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞
        self.daily_sale_threshold = Decimal("10000")  # $10,000 –ø–æ—Ä–æ–≥ –∑–∞ –¥–µ–Ω—å
        
        # –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.token_prices_cache = {}
        self.price_cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        self.last_price_update = 0
        self.daily_sales_cache = {}  # –ö—ç—à –ø—Ä–æ–¥–∞–∂ –∑–∞ –¥–µ–Ω—å
        
        # –ü—É–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.pool_addresses = get_all_pool_addresses()
        self.solana_pools = self._get_solana_pools()
        self.ethereum_pools = self._get_ethereum_pools()
        
        # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.helius_api_key = self._get_helius_key()
        self.helius_rpc_url = f"https://mainnet.helius-rpc.com/?api-key={self.helius_api_key}"
        self.bitquery_endpoint = "https://streaming.bitquery.io/eap"
        self.bitquery_api_key = self._get_bitquery_key()
        
        # –°–ø–∏—Å–∫–∏ DAO –∏ BIO —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.dao_token_addresses = {dao.token_address: dao.token_symbol for dao in ALL_DAOS}
        self.bio_token_addresses = {BIO_TOKEN_SOLANA: 'BIO', BIO_TOKEN_ETHEREUM: 'BIO'}
        
        logger.info(f"Initialized Pool Monitor for {len(self.pool_addresses)} pools")
        logger.info(f"Monitoring {len(self.dao_token_addresses)} DAO tokens and {len(self.bio_token_addresses)} BIO tokens")
        logger.info(f"Solana pools: {len(self.solana_pools)}, Ethereum pools: {len(self.ethereum_pools)}")
    
    def _get_helius_key(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Helius API –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        import os
        return os.getenv('HELIUS_API_KEY', '')
    
    def _get_bitquery_key(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ BitQuery API –∫–ª—é—á–∞"""
        import os
        return os.getenv('BITQUERY_API_KEY', '')
    
    def _get_solana_pools(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Solana –ø—É–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        pools = []
        for dao in SOLANA_DAOS:
            if dao.pools:
                for pool_addr in dao.pools:
                    pools.append({
                        'address': pool_addr,
                        'dao_name': dao.name,
                        'dao_token_symbol': dao.token_symbol,
                        'dao_token_address': dao.token_address
                    })
        return pools
    
    def _get_ethereum_pools(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Ethereum –ø—É–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        pools = []
        for dao in ETHEREUM_DAOS:
            pool_addresses = []
            if dao.eth_pool_address:
                pool_addresses.append(dao.eth_pool_address)
            if dao.bio_pool_address:
                pool_addresses.append(dao.bio_pool_address)
            
            for pool_addr in pool_addresses:
                pools.append({
                    'address': pool_addr,
                    'dao_name': dao.name,
                    'dao_token_symbol': dao.token_symbol,
                    'dao_token_address': dao.token_address
                })
        return pools
    
    async def start_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.http_client is None:
            self.http_client = httpx.AsyncClient(timeout=60.0)
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.http_client:
            await self.http_client.aclose()
            self.http_client = None
    
    async def run_pool_monitoring_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É–ª–æ–≤"""
        try:
            await self.start_session()
            
            start_time = time.time()
            logger.info("üèä Starting pool monitoring cycle")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
            await self.update_token_prices()
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Solana –ø—É–ª–æ–≤
            solana_activities = await self.monitor_solana_pools()
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Ethereum –ø—É–ª–æ–≤
            ethereum_activities = await self.monitor_ethereum_pools()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            all_activities = solana_activities + ethereum_activities
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            significant_activities = self.filter_significant_activities(all_activities)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø—Ä–æ–¥–∞–∂
            daily_alerts = await self.check_daily_sales_limits()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if significant_activities:
                await self.save_pool_activities(significant_activities)
                logger.info(f"üíæ Saved {len(significant_activities)} significant pool activities")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã
            alerts_generated = await self.generate_alerts(significant_activities, daily_alerts)
            
            processing_time = time.time() - start_time
            logger.info(f"‚úÖ Pool monitoring cycle completed in {processing_time:.2f}s")
            logger.info(f"üìä Found {len(all_activities)} activities, {len(significant_activities)} significant, {alerts_generated} alerts")
            
        except Exception as e:
            logger.error(f"‚ùå Error in pool monitoring cycle: {e}")
            import traceback
            logger.error(f"Full traceback: {traceback.format_exc()}")
        finally:
            await self.close_session()
    
    def filter_significant_activities(self, activities: List[PoolActivityInfo]) -> List[PoolActivityInfo]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
        significant = []
        
        for activity in activities:
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏:
            # 1. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è > $10K
            # 2. –ü—Ä–æ–¥–∞–∂–∞ DAO –∏–ª–∏ BIO —Ç–æ–∫–µ–Ω–∞ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            # 3. Add/Remove liquidity > $10K (–≤–∫–ª—é—á–∞—è —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ü–µ–Ω–∫–∏)
            
            is_significant = False
            is_estimated_value = activity.metadata and activity.metadata.get('estimated_value', False)
            
            # –ö—Ä—É–ø–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            if activity.total_usd_value >= self.alert_threshold:
                is_significant = True
                value_type = "estimated" if is_estimated_value else "actual"
                logger.info(f"üö® Large transaction: ${activity.total_usd_value} ({value_type}) in {activity.dao_name} pool")
            
            # –ü—Ä–æ–¥–∞–∂–∞ DAO –∏–ª–∏ BIO —Ç–æ–∫–µ–Ω–∞
            if activity.dao_token_sold or activity.bio_token_sold:
                is_significant = True
                token_type = "DAO" if activity.dao_token_sold else "BIO"
                logger.info(f"üìâ {token_type} token sale: ${activity.total_usd_value} in {activity.dao_name} pool")
            
            # Add/Remove liquidity –æ–ø–µ—Ä–∞—Ü–∏–∏
            if activity.activity_type in ['add_liquidity', 'remove_liquidity']:
                # –î–ª—è liquidity –æ–ø–µ—Ä–∞—Ü–∏–π —É—á–∏—Ç—ã–≤–∞–µ–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ü–µ–Ω–∫–∏
                if activity.total_usd_value >= self.alert_threshold or is_estimated_value:
                    is_significant = True
                    value_info = f"${activity.total_usd_value} (estimated)" if is_estimated_value else f"${activity.total_usd_value}"
                    logger.info(f"üíß Large liquidity operation: {activity.activity_type} {value_info} in {activity.dao_name}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Raydium –∏ Uniswap –æ–ø–µ—Ä–∞—Ü–∏–π —Å DAO/BIO —Ç–æ–∫–µ–Ω–∞–º–∏
            if activity.metadata:
                dao_involved = activity.metadata.get('dao_token_involved', False)
                bio_involved = activity.metadata.get('bio_token_involved', False)
                
                if (dao_involved or bio_involved) and activity.activity_type in ['add_liquidity', 'remove_liquidity']:
                    is_significant = True
                    token_type = "DAO" if dao_involved else "BIO"
                    blockchain = activity.blockchain.title()
                    logger.info(f"üîó {token_type} token liquidity operation: {activity.activity_type} on {blockchain} ({activity.dao_name})")
            
            if is_significant:
                significant.append(activity)
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂ (—Ç–æ–ª—å–∫–æ –¥–ª—è swap –æ–ø–µ—Ä–∞—Ü–∏–π, –Ω–µ –¥–ª—è liquidity)
                if activity.activity_type in ['swap_sell', 'swap_buy']:
                    self.update_daily_sales_cache(activity)
        
        return significant
    
    def update_daily_sales_cache(self, activity: PoolActivityInfo):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂"""
        today = datetime.now().date()
        
        if today not in self.daily_sales_cache:
            self.daily_sales_cache[today] = {
                'dao_sales': Decimal('0'),
                'bio_sales': Decimal('0'),
                'total_sales': Decimal('0')
            }
        
        if activity.dao_token_sold:
            self.daily_sales_cache[today]['dao_sales'] += activity.total_usd_value
        
        if activity.bio_token_sold:
            self.daily_sales_cache[today]['bio_sales'] += activity.total_usd_value
        
        self.daily_sales_cache[today]['total_sales'] += activity.total_usd_value
    
    async def check_daily_sales_limits(self) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂"""
        today = datetime.now().date()
        alerts = []
        
        if today in self.daily_sales_cache:
            daily_data = self.daily_sales_cache[today]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if daily_data['dao_sales'] >= self.daily_sale_threshold:
                alerts.append({
                    'type': 'daily_dao_sales',
                    'amount': daily_data['dao_sales'],
                    'threshold': self.daily_sale_threshold,
                    'date': today
                })
            
            if daily_data['bio_sales'] >= self.daily_sale_threshold:
                alerts.append({
                    'type': 'daily_bio_sales',
                    'amount': daily_data['bio_sales'],
                    'threshold': self.daily_sale_threshold,
                    'date': today
                })
        
        return alerts
    
    async def update_token_prices(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤"""
        current_time = time.time()
        
        if current_time - self.last_price_update < self.price_cache_ttl:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –≤—Å–µ—Ö DAO –∏ BIO —Ç–æ–∫–µ–Ω–æ–≤
            all_tokens = list(self.dao_token_addresses.keys()) + list(self.bio_token_addresses.keys())
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–ª–æ–∫—á–µ–π–Ω–∞–º
            ethereum_tokens = [token for token in all_tokens if token == BIO_TOKEN_ETHEREUM or any(dao.token_address == token and dao.blockchain == 'ethereum' for dao in ALL_DAOS)]
            solana_tokens = [token for token in all_tokens if token not in ethereum_tokens]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
            if ethereum_tokens:
                eth_prices = await get_multiple_token_prices(ethereum_tokens, 'ethereum', self.http_client)
                self.token_prices_cache.update(eth_prices)
            
            if solana_tokens:
                sol_prices = await get_multiple_token_prices(solana_tokens, 'solana', self.http_client)
                self.token_prices_cache.update(sol_prices)
            
            self.last_price_update = current_time
            logger.info(f"üí∞ Updated prices for {len(self.token_prices_cache)} tokens")
            
        except Exception as e:
            logger.error(f"Error updating token prices: {e}")
    
    async def monitor_solana_pools(self) -> List[PoolActivityInfo]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Solana –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ BitQuery"""
        activities = []
        
        try:
            logger.info(f"üîç Monitoring {len(self.solana_pools)} Solana pools")
            
            for pool_info in self.solana_pools:
                pool_activities = await self.fetch_solana_pool_trades(
                    pool_info['address'],
                    pool_info['dao_name'],
                    pool_info['dao_token_address']
                )
                activities.extend(pool_activities)
            
            logger.info(f"üìà Found {len(activities)} Solana pool activities")
            
        except Exception as e:
            logger.error(f"Error monitoring Solana pools: {e}")
        
        return activities
    
    async def monitor_ethereum_pools(self) -> List[PoolActivityInfo]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Ethereum –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ Web3"""
        activities = []
        
        try:
            logger.info(f"üîç Monitoring {len(self.ethereum_pools)} Ethereum pools")
            
            # –ü–æ–ª—É—á–∞–µ–º Ethereum RPC URL
            ethereum_rpc_url = self._get_ethereum_rpc_url()
            if not ethereum_rpc_url:
                logger.warning("Ethereum RPC URL not configured, skipping Ethereum pools")
                return activities
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Web3 –¥–ª—è Ethereum –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            try:
                from web3 import Web3
                from web3.exceptions import Web3Exception
            except ImportError:
                logger.error("web3 library not installed, skipping Ethereum pools")
                return activities
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Ethereum
            w3 = Web3(Web3.HTTPProvider(ethereum_rpc_url))
            if not w3.is_connected():
                logger.error("Failed to connect to Ethereum RPC")
                return activities
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –∏ –±–ª–æ–∫ —á–∞—Å –Ω–∞–∑–∞–¥
            current_block = w3.eth.block_number
            blocks_per_hour = 300  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 12 —Å–µ–∫—É–Ω–¥ –Ω–∞ –±–ª–æ–∫
            from_block = max(0, current_block - blocks_per_hour)
            
            logger.debug(f"Scanning Ethereum blocks {from_block} to {current_block}")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–∂–¥—ã–π –ø—É–ª
            for pool_info in self.ethereum_pools:
                pool_activities = await self.fetch_ethereum_pool_events(
                    w3, 
                    pool_info['address'], 
                    pool_info['dao_name'],
                    pool_info['dao_token_address'],
                    from_block,
                    current_block
                )
                activities.extend(pool_activities)
            
            logger.info(f"üìà Found {len(activities)} Ethereum pool activities")
            
        except Exception as e:
            logger.error(f"Error monitoring Ethereum pools: {e}")
            import traceback
            logger.error(f"Full traceback: {traceback.format_exc()}")
        
        return activities
    
    def _get_ethereum_rpc_url(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Ethereum RPC URL"""
        import os
        rpc_url = os.getenv('ETHEREUM_RPC_URL')
        if rpc_url:
            return rpc_url
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è Railway - –∏—Å–ø–æ–ª—å–∑—É–µ–º hardcoded URL –µ—Å–ª–∏ –≤ Railway
        if os.getenv('RAILWAY_ENVIRONMENT'):
            return 'https://eth-mainnet.g.alchemy.com/v2/0l42UZmHRHWXBYMJ2QFcdEE-Glj20xqn'
        
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π Alchemy URL
        return 'https://eth-mainnet.g.alchemy.com/v2/0l42UZmHRHWXBYMJ2QFcdEE-Glj20xqn'
    
    async def fetch_ethereum_pool_events(self, w3, pool_address: str, dao_name: str, dao_token_address: str, from_block: int, to_block: int) -> List[PoolActivityInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Mint/Burn —Å–æ–±—ã—Ç–∏–π –∏–∑ Ethereum –ø—É–ª–∞"""
        activities = []
        
        try:
            # Uniswap V2 —Å–æ–±—ã—Ç–∏—è
            mint_topic = "0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f"  # Mint(address,uint256,uint256)
            burn_topic = "0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496"  # Burn(address,uint256,uint256,address)
            
            # Uniswap V3 —Å–æ–±—ã—Ç–∏—è
            mint_v3_topic = "0x7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde"  # Mint(address,address,int24,int24,uint128,uint256,uint256)
            burn_v3_topic = "0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c"  # Burn(address,int24,int24,uint128,uint256,uint256)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è Mint –∏ Burn
            all_events = []
            
            try:
                # Uniswap V2 Mint —Å–æ–±—ã—Ç–∏—è
                mint_events = w3.eth.get_logs({
                    'address': Web3.to_checksum_address(pool_address),
                    'topics': [mint_topic],
                    'fromBlock': from_block,
                    'toBlock': to_block
                })
                all_events.extend([(event, 'add_liquidity', 'v2') for event in mint_events])
                
                # Uniswap V2 Burn —Å–æ–±—ã—Ç–∏—è
                burn_events = w3.eth.get_logs({
                    'address': Web3.to_checksum_address(pool_address),
                    'topics': [burn_topic],
                    'fromBlock': from_block,
                    'toBlock': to_block
                })
                all_events.extend([(event, 'remove_liquidity', 'v2') for event in burn_events])
                
                # Uniswap V3 Mint —Å–æ–±—ã—Ç–∏—è
                mint_v3_events = w3.eth.get_logs({
                    'address': Web3.to_checksum_address(pool_address),
                    'topics': [mint_v3_topic],
                    'fromBlock': from_block,
                    'toBlock': to_block
                })
                all_events.extend([(event, 'add_liquidity', 'v3') for event in mint_v3_events])
                
                # Uniswap V3 Burn —Å–æ–±—ã—Ç–∏—è
                burn_v3_events = w3.eth.get_logs({
                    'address': Web3.to_checksum_address(pool_address),
                    'topics': [burn_v3_topic],
                    'fromBlock': from_block,
                    'toBlock': to_block
                })
                all_events.extend([(event, 'remove_liquidity', 'v3') for event in burn_v3_events])
                
            except Exception as e:
                logger.debug(f"Error fetching events for pool {pool_address}: {e}")
                return activities
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏—è
            for event_log, activity_type, uniswap_version in all_events:
                activity = await self.parse_ethereum_liquidity_event(
                    w3, event_log, activity_type, uniswap_version, 
                    pool_address, dao_name, dao_token_address
                )
                if activity:
                    activities.append(activity)
            
            logger.debug(f"Found {len(all_events)} liquidity events for Ethereum pool {pool_address}")
            
        except Exception as e:
            logger.error(f"Error fetching Ethereum pool events for {pool_address}: {e}")
        
        return activities
    
    async def parse_ethereum_liquidity_event(self, w3, event_log, activity_type: str, uniswap_version: str, pool_address: str, dao_name: str, dao_token_address: str) -> Optional[PoolActivityInfo]:
        """–ü–∞—Ä—Å–∏–Ω–≥ Ethereum liquidity —Å–æ–±—ã—Ç–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            tx_hash = event_log['transactionHash'].hex()
            block_info = w3.eth.get_block(event_log['blockNumber'])
            timestamp = datetime.fromtimestamp(block_info['timestamp'])
            
            # –î–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å event data
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É
            total_usd_value = Decimal('0')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ DAO –∏–ª–∏ BIO —Ç–æ–∫–µ–Ω –≤ —ç—Ç–æ–º –ø—É–ª–µ
            dao_token_involved = False
            bio_token_involved = False
            
            # –ï—Å–ª–∏ –ø—É–ª —Å–≤—è–∑–∞–Ω —Å DAO, —Ç–æ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ DAO —Ç–æ–∫–µ–Ω –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω
            dao_token_involved = any(dao.token_address == dao_token_address for dao in ALL_DAOS)
            bio_token_involved = dao_token_address in self.bio_token_addresses
            
            if dao_token_involved or bio_token_involved:
                # –î–ª—è –ø—É–ª–æ–≤ —Å DAO/BIO —Ç–æ–∫–µ–Ω–∞–º–∏, –æ—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
                total_usd_value = Decimal('8000')  # –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è Ethereum
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø—É–ª–∞ –∏–∑ –∫—ç—à–∞ —Ü–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
            token0_symbol = ""
            token1_symbol = ""
            
            if dao_token_address in self.dao_token_addresses:
                token0_symbol = self.dao_token_addresses[dao_token_address]
            if dao_token_address in self.bio_token_addresses:
                token1_symbol = self.bio_token_addresses[dao_token_address]
            
            activity = PoolActivityInfo(
                tx_hash=tx_hash,
                timestamp=timestamp,
                dao_name=dao_name,
                blockchain="ethereum",
                pool_address=pool_address,
                activity_type=activity_type,
                token0_address=dao_token_address,
                token1_address="",  # –¢—Ä–µ–±—É–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è event data
                token0_symbol=token0_symbol,
                token1_symbol=token1_symbol,
                token0_amount=Decimal('0'),  # –¢—Ä–µ–±—É–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è event data
                token1_amount=Decimal('0'),
                total_usd_value=total_usd_value,
                dao_token_sold=False,  # Liquidity –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∞–º–∏
                bio_token_sold=False,
                metadata={
                    "uniswap_version": uniswap_version,
                    "event_type": activity_type,
                    "dao_token_involved": dao_token_involved,
                    "bio_token_involved": bio_token_involved,
                    "estimated_value": True,  # –§–ª–∞–≥ —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ü–µ–Ω–æ—á–Ω–∞—è
                    "block_number": event_log['blockNumber']
                }
            )
            
            return activity
            
        except Exception as e:
            logger.error(f"Error parsing Ethereum liquidity event: {e}")
            return None
    
    async def fetch_solana_pool_trades(self, pool_address: str, dao_name: str, dao_token_address: str) -> List[PoolActivityInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤ –∏ liquidity –æ–ø–µ—Ä–∞—Ü–∏–π Solana –ø—É–ª–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"""
        activities = []
        
        try:
            # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)
            time_since = (datetime.now() - timedelta(hours=1)).strftime("%Y-%m-%dT%H:%M:%SZ")
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π GraphQL –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤ (—É–±–∏—Ä–∞–µ–º Instructions –ø–æ–∫–∞ —á—Ç–æ)
            query = """
            query poolActivities($since: DateTime!) {
              Solana(network: solana, dataset: realtime) {
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–∏ (swaps)
                DEXTrades(
                  where: {
                    Block: {Time: {since: $since}}
                  }
                  orderBy: {descending: Block_Time}
                  limit: {count: 50}
                ) {
                  Block {
                    Time
                  }
                  Transaction {
                    Signature
                  }
                  Trade {
                    Buy {
                      Amount
                      Currency {
                        MintAddress
                        Symbol
                      }
                      AmountInUSD
                    }
                    Sell {
                      Amount
                      Currency {
                        MintAddress
                        Symbol
                      }
                      AmountInUSD
                    }
                    Dex {
                      ProtocolName
                    }
                  }
                }
              }
            }
            """
            
            if not self.bitquery_api_key:
                logger.debug(f"BitQuery API key not configured, skipping pool {pool_address}")
                return activities
            
            variables = {"since": time_since}
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.bitquery_api_key}"
            }
            
            response = await self.http_client.post(
                self.bitquery_endpoint, 
                json={"query": query, "variables": variables}, 
                headers=headers
            )
            
            if response.status_code != 200:
                logger.debug(f"BitQuery API error {response.status_code} for pool {pool_address}")
                return activities
            
            data = response.json()
            
            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            if logger.isEnabledFor(logging.DEBUG):
                logger.debug(f"BitQuery response for pool {pool_address}: {json.dumps(data, indent=2)[:500]}...")
            
            solana_data = data.get("data", {})
            if solana_data is None:
                logger.debug(f"No data returned from BitQuery for pool {pool_address}")
                return activities
            
            solana_data = solana_data.get("Solana", {})
            if solana_data is None:
                logger.debug(f"No Solana data returned from BitQuery for pool {pool_address}")
                return activities
            
            # –ü–∞—Ä—Å–∏–º —Ç–æ—Ä–≥–∏
            trades = solana_data.get("DEXTrades", [])
            if trades is None:
                logger.debug(f"No trades data returned for pool {pool_address}")
                trades = []
                
            for trade in trades:
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –≤ —Ç–æ—Ä–≥–µ
                trade_data = trade.get("Trade", {})
                buy_data = trade_data.get("Buy", {})
                sell_data = trade_data.get("Sell", {})
                
                buy_token = buy_data.get("Currency", {}).get("MintAddress", "")
                sell_token = sell_data.get("Currency", {}).get("MintAddress", "")
                buy_symbol = buy_data.get("Currency", {}).get("Symbol", "")
                sell_symbol = sell_data.get("Currency", {}).get("Symbol", "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ—Ä–≥ —Å–≤—è–∑–∞–Ω —Å –Ω–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
                has_our_token = (
                    dao_token_address in [buy_token, sell_token] or
                    buy_token in self.dao_token_addresses or
                    sell_token in self.dao_token_addresses or
                    buy_token in self.bio_token_addresses or
                    sell_token in self.bio_token_addresses or
                    'BIO' in [buy_symbol, sell_symbol] or
                    dao_name.upper() in buy_symbol.upper() or
                    dao_name.upper() in sell_symbol.upper()
                )
                
                if has_our_token:
                    activity = self.parse_solana_trade(trade, pool_address, dao_name, dao_token_address)
                    if activity:
                        activities.append(activity)
            
            logger.debug(f"Found {len(trades)} trades for pool {pool_address}")
            
        except Exception as e:
            logger.error(f"Error fetching Solana pool activities for {pool_address}: {e}")
        
        return activities
    
    def parse_solana_trade(self, trade_data: Dict[str, Any], pool_address: str, dao_name: str, dao_token_address: str) -> Optional[PoolActivityInfo]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ—Ä–≥–∞ Solana"""
        try:
            block_data = trade_data.get("Block", {})
            transaction_data = trade_data.get("Transaction", {})
            trade_info = trade_data.get("Trade", {})
            
            tx_hash = transaction_data.get("Signature", "")
            timestamp_str = block_data.get("Time")
            
            if not tx_hash or not timestamp_str:
                return None
            
            timestamp = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
            
            buy_data = trade_info.get("Buy", {})
            sell_data = trade_info.get("Sell", {})
            
            buy_currency = buy_data.get("Currency", {})
            sell_currency = sell_data.get("Currency", {})
            
            buy_token_address = buy_currency.get("MintAddress", "")
            sell_token_address = sell_currency.get("MintAddress", "")
            
            buy_symbol = buy_currency.get("Symbol", "Unknown")
            sell_symbol = sell_currency.get("Symbol", "Unknown")
            
            buy_amount = Decimal(str(buy_data.get("Amount", 0)))
            sell_amount = Decimal(str(sell_data.get("Amount", 0)))
            
            buy_usd = Decimal(str(buy_data.get("AmountInUSD", 0)))
            sell_usd = Decimal(str(sell_data.get("AmountInUSD", 0)))
            
            total_usd_value = max(buy_usd, sell_usd)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ–¥–∞–µ—Ç—Å—è –ª–∏ DAO –∏–ª–∏ BIO —Ç–æ–∫–µ–Ω
            dao_token_sold = (sell_token_address == dao_token_address or 
                            sell_token_address in self.dao_token_addresses)
            bio_token_sold = sell_token_address in self.bio_token_addresses
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if dao_token_sold or bio_token_sold:
                activity_type = "swap_sell"
            else:
                activity_type = "swap_buy"
            
            activity = PoolActivityInfo(
                tx_hash=tx_hash,
                timestamp=timestamp,
                dao_name=dao_name,
                blockchain="solana",
                pool_address=pool_address,
                activity_type=activity_type,
                token0_address=buy_token_address,
                token1_address=sell_token_address,
                token0_symbol=buy_symbol,
                token1_symbol=sell_symbol,
                token0_amount=buy_amount,
                token1_amount=sell_amount,
                total_usd_value=total_usd_value,
                dao_token_sold=dao_token_sold,
                bio_token_sold=bio_token_sold,
                metadata={
                    "buy_usd": str(buy_usd),
                    "sell_usd": str(sell_usd)
                }
            )
            
            return activity
            
        except Exception as e:
            logger.error(f"Error parsing Solana trade: {e}")
            return None
    
    async def save_pool_activities(self, activities: List[PoolActivityInfo]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –ø—É–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        for activity in activities:
            try:
                activity_data = {
                    'tx_hash': activity.tx_hash,
                    'timestamp': activity.timestamp,
                    'dao_name': activity.dao_name,
                    'blockchain': activity.blockchain,
                    'pool_address': activity.pool_address,
                    'activity_type': activity.activity_type,
                    'token0_address': activity.token0_address,
                    'token1_address': activity.token1_address,
                    'token0_symbol': activity.token0_symbol,
                    'token1_symbol': activity.token1_symbol,
                    'token0_amount': activity.token0_amount,
                    'token1_amount': activity.token1_amount,
                    'total_usd_value': activity.total_usd_value,
                    'alert_triggered': activity.total_usd_value >= self.alert_threshold or activity.dao_token_sold or activity.bio_token_sold,
                    'metadata': {
                        **activity.metadata,
                        'dao_token_sold': activity.dao_token_sold,
                        'bio_token_sold': activity.bio_token_sold
                    }
                }
                
                success = self.database.save_pool_activity(activity_data)
                if success:
                    logger.debug(f"üíæ Saved pool activity: {activity.dao_name} - ${activity.total_usd_value}")
                
            except Exception as e:
                logger.error(f"Error saving pool activity: {e}")
    
    async def generate_alerts(self, activities: List[PoolActivityInfo], daily_alerts: List[Dict[str, Any]]) -> int:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts_count = 0
        
        # –ê–ª–µ—Ä—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        for activity in activities:
            if (activity.total_usd_value >= self.alert_threshold or 
                activity.dao_token_sold or activity.bio_token_sold):
                
                alert_message = self.format_activity_alert(activity)
                logger.warning(f"üö® POOL ALERT: {alert_message}")
                alerts_count += 1
        
        # –ê–ª–µ—Ä—Ç—ã –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        for daily_alert in daily_alerts:
            alert_message = self.format_daily_alert(daily_alert)
            logger.warning(f"üö® DAILY LIMIT ALERT: {alert_message}")
            alerts_count += 1
        
        return alerts_count
    
    def format_activity_alert(self, activity: PoolActivityInfo) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        alert_type = ""
        if activity.dao_token_sold:
            alert_type = "DAO Token Sale"
        elif activity.bio_token_sold:
            alert_type = "BIO Token Sale"
        elif activity.activity_type == "add_liquidity":
            alert_type = "Add Liquidity"
        elif activity.activity_type == "remove_liquidity":
            alert_type = "Remove Liquidity"
        elif activity.total_usd_value >= self.alert_threshold:
            alert_type = "Large Transaction"
        else:
            alert_type = "Pool Activity"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        blockchain_info = activity.blockchain.title()
        is_estimated = activity.metadata and activity.metadata.get('estimated_value', False)
        value_suffix = " (estimated)" if is_estimated else ""
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
        operation_info = ""
        if activity.activity_type in ["add_liquidity", "remove_liquidity"]:
            if activity.metadata:
                if activity.metadata.get('uniswap_version'):
                    operation_info = f"Uniswap {activity.metadata['uniswap_version'].upper()}"
                elif activity.metadata.get('program_name'):
                    operation_info = activity.metadata['program_name']
        
        token_info = ""
        if activity.token0_symbol and activity.token1_symbol:
            token_info = f"Tokens: {activity.token0_symbol} ‚Üî {activity.token1_symbol}"
        elif activity.token0_symbol:
            token_info = f"Token: {activity.token0_symbol}"
        
        alert_parts = [
            f"{alert_type} detected!",
            f"DAO: {activity.dao_name}",
            f"Blockchain: {blockchain_info}",
            f"Pool: {activity.pool_address[:10]}...{activity.pool_address[-8:]}",
            f"Operation: {activity.activity_type.replace('_', ' ').title()}"
        ]
        
        if operation_info:
            alert_parts.append(f"Protocol: {operation_info}")
        
        if token_info:
            alert_parts.append(token_info)
        
        alert_parts.extend([
            f"Value: ${activity.total_usd_value:,.2f}{value_suffix}",
            f"Tx: {activity.tx_hash}",
            f"Time: {activity.timestamp.strftime('%Y-%m-%d %H:%M:%S')}"
        ])
        
        return "\n".join(alert_parts)
    
    def format_daily_alert(self, daily_alert: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤"""
        alert_type = daily_alert['type']
        amount = daily_alert['amount']
        threshold = daily_alert['threshold']
        date = daily_alert['date']
        
        if alert_type == 'daily_dao_sales':
            token_type = "DAO tokens"
        else:
            token_type = "BIO tokens"
        
        return (
            f"Daily {token_type} sales limit exceeded!\n"
            f"Date: {date}\n"
            f"Total sales: ${amount:,.2f}\n"
            f"Threshold: ${threshold:,.2f}\n"
            f"Exceeded by: ${amount - threshold:,.2f}"
        ) 