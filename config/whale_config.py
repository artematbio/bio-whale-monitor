#!/usr/bin/env python3
"""
BIO Whale Monitor Configuration
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä—É–ø–Ω—ã—Ö –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BIO –∏ vBIO —Ç–æ–∫–µ–Ω–æ–≤
"""

# BIO –∏ vBIO —Ç–æ–∫–µ–Ω—ã –Ω–∞ Ethereum
BIO_TOKENS = {
    "BIO": {
        "contract_address": "0xcb1592591996765Ec0eFc1f92599A19767ee5ffA",  # BIO token contract
        "symbol": "BIO",
        "decimals": 18,
        "name": "BIO Protocol"
    },
    "vBIO": {
        "contract_address": "0x2141B47A1C7De6df073d23ff94F04d9fd2aaA9b3",  # vBIO contract (–Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å)
        "symbol": "vBIO", 
        "decimals": 18,
        "name": "Voting BIO"
    }
}

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
WHALE_THRESHOLDS = {
    "token_amount": 1_000_000,  # 1 –º–∏–ª–ª–∏–æ–Ω —Ç–æ–∫–µ–Ω–æ–≤
    "usd_amount": 100_000,      # $100,000 USD
}

# –ö–æ—à–µ–ª—å–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
MONITORED_WALLETS = [
    # –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    # –ü—Ä–∏–º–µ—Ä:
    # "0x1234567890123456789012345678901234567890",
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MONITORING_CONFIG = {
    "check_interval": 30,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    "blocks_lookback": 5,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∑–∞–¥
    "retry_attempts": 3,
    "retry_delay": 5,
}

def print_whale_monitoring_summary():
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ whale –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\n" + "="*80)
    print("üêã BIO WHALE MONITOR CONFIGURATION")
    print("="*80)
    
    print(f"\nüìä TOKENS TO MONITOR:")
    for token_key, token_info in BIO_TOKENS.items():
        print(f"  ‚Ä¢ {token_info['name']} ({token_info['symbol']})")
        print(f"    Contract: {token_info['contract_address']}")
        print(f"    Decimals: {token_info['decimals']}")
    
    print(f"\nüö® ALERT THRESHOLDS:")
    print(f"  ‚Ä¢ Token Amount: {WHALE_THRESHOLDS['token_amount']:,} tokens")
    print(f"  ‚Ä¢ USD Value: ${WHALE_THRESHOLDS['usd_amount']:,}")
    
    print(f"\nüëõ MONITORED WALLETS:")
    if MONITORED_WALLETS:
        for i, wallet in enumerate(MONITORED_WALLETS, 1):
            print(f"  {i}. {wallet}")
    else:
        print("  ‚ö†Ô∏è  No wallets configured yet")
    
    print(f"\n‚öôÔ∏è  MONITORING SETTINGS:")
    print(f"  ‚Ä¢ Check Interval: {MONITORING_CONFIG['check_interval']} seconds")
    print(f"  ‚Ä¢ Blocks Lookback: {MONITORING_CONFIG['blocks_lookback']}")
    print(f"  ‚Ä¢ Retry Attempts: {MONITORING_CONFIG['retry_attempts']}")
    
    print("="*80)

def validate_wallet_address(address: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è Ethereum –∞–¥—Ä–µ—Å–∞"""
    if not address.startswith('0x'):
        return False
    if len(address) != 42:
        return False
    try:
        int(address, 16)
        return True
    except ValueError:
        return False

def add_monitored_wallet(address: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ—à–µ–ª–µ–∫ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if validate_wallet_address(address):
        if address.lower() not in [w.lower() for w in MONITORED_WALLETS]:
            MONITORED_WALLETS.append(address)
            return True
    return False 