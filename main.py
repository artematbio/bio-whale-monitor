#!/usr/bin/env python3
"""
BIO Whale Monitor - –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä—É–ø–Ω—ã—Ö –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BIO –∏ vBIO —Ç–æ–∫–µ–Ω–æ–≤
"""

import asyncio
import logging
import signal
import sys
import os
import time
from datetime import datetime
from typing import Optional, Dict, Any
import argparse

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from config.whale_config import print_whale_monitoring_summary, MONITORED_WALLETS
from database.database import DAOTreasuryDatabase
from monitors.bio_whale_monitor import BIOWhaleMonitor
from notifications.notification_system import NotificationSystem, init_notification_system
from health_check import get_health_server

# –î–æ–±–∞–≤–ª—è–µ–º PostgreSQL –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è Railway
try:
    from database.postgresql_database import PostgreSQLDatabase
    POSTGRESQL_AVAILABLE = True
except ImportError:
    POSTGRESQL_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging(log_level: str = 'INFO', log_file: Optional[str] = None):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    level = getattr(logging, log_level.upper(), logging.INFO)
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging_config = {
        'level': level,
        'format': log_format,
        'datefmt': '%Y-%m-%d %H:%M:%S'
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if log_file:
        logging_config['filename'] = log_file
        logging_config['filemode'] = 'a'
    
    logging.basicConfig(**logging_config)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª
    if log_file:
        console_handler = logging.StreamHandler()
        console_handler.setLevel(level)
        console_formatter = logging.Formatter(log_format)
        console_handler.setFormatter(console_formatter)
        logging.getLogger().addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('aiohttp').setLevel(logging.WARNING)
    logging.getLogger('urllib3').setLevel(logging.WARNING)

def get_database():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQLite –∏–ª–∏ PostgreSQL)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Railway
    database_url = os.getenv('DATABASE_URL') or os.getenv('DATABASE_PUBLIC_URL')
    
    if database_url and POSTGRESQL_AVAILABLE:
        logging.info(f"Using PostgreSQL database for Railway deployment: {database_url[:50]}...")
        return PostgreSQLDatabase(database_url)
    else:
        logging.info("Using SQLite database for local development")
        return DAOTreasuryDatabase()

def get_ethereum_rpc_url() -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Ethereum RPC URL"""
    return os.getenv('ETHEREUM_RPC_URL')

class BIOWhaleMonitorApp:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ BIO Whale Monitor"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.logger = logging.getLogger(self.__class__.__name__)
        self.database = None
        self.whale_monitor = None
        self.notification_system = None
        self.health_server = None
        self.running = False
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        # API –∫–ª—é—á–∏
        self.ethereum_rpc_url = get_ethereum_rpc_url()
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
        self.logger.info(f"Received signal {signum}, shutting down gracefully...")
        self.running = False
    
    def initialize_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.database = get_database()
            database_type = "PostgreSQL" if hasattr(self.database, 'connection_pool') else "SQLite"
            self.logger.info(f"Database initialized: {database_type}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            stats = self.database.get_database_stats()
            self.logger.info(f"Database stats: {stats}")
            
        except Exception as e:
            self.logger.error(f"Failed to initialize database: {e}")
            raise
    
    def initialize_monitors(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–æ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self.notification_system = init_notification_system(self.database)
            self.logger.info("Notification system initialized")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Ethereum RPC
            if not self.ethereum_rpc_url:
                self.logger.error("‚ùå ETHEREUM_RPC_URL not configured - whale monitoring cannot start")
                raise Exception("Ethereum RPC URL is required for whale monitoring")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
            if not MONITORED_WALLETS:
                self.logger.warning("‚ö†Ô∏è No wallets configured for monitoring")
                self.logger.warning("   Please add wallet addresses to config/whale_config.py")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BIO Whale –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            try:
                self.whale_monitor = BIOWhaleMonitor(
                    self.ethereum_rpc_url, 
                    self.database, 
                    self.notification_system
                )
                self.logger.info("‚úÖ BIO Whale monitor initialized successfully")
            except Exception as e:
                self.logger.error(f"‚ùå Failed to initialize whale monitor: {e}")
                import traceback
                self.logger.error(f"Full traceback: {traceback.format_exc()}")
                self.whale_monitor = None
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º health check server –¥–ª—è Railway
            self.health_server = get_health_server()
            self.logger.info("Health check server initialized")
            
        except Exception as e:
            self.logger.error(f"Failed to initialize monitors: {e}")
            raise
    
    async def _send_deployment_notification_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—Å–ø–µ—à–Ω–æ–º –¥–µ–ø–ª–æ–µ"""
        try:
            self.logger.info("üöÄ Preparing deployment notification...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            whale_status = "‚úÖ Active" if self.whale_monitor else "‚ùå Disabled"
            wallets_count = len(MONITORED_WALLETS)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            stats = self.database.get_database_stats()
            
            message = f"""üöÄ **BIO Whale Monitor Deployed Successfully**

üêã **Whale Monitor Status:** {whale_status}
üëõ **Monitored Wallets:** {wallets_count}
üìä **Health Check:** ‚úÖ Active

**Database Stats:**
‚Ä¢ Transactions: {stats.get('treasury_transactions', 0)}
‚Ä¢ Alerts: {stats.get('alerts', 0)}
‚Ä¢ DB Size: {stats.get('database_size_mb', 0):.2f} MB

**Monitoring Thresholds:**
‚Ä¢ Token Amount: 1,000,000+ BIO/vBIO
‚Ä¢ USD Value: $100,000+
‚Ä¢ Check Interval: 30 seconds

üéØ Whale monitoring is active 24/7!"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if hasattr(self.notification_system, 'telegram') and self.notification_system.telegram:
                success = await self.notification_system.telegram.send_message(message)
                if success:
                    self.logger.info("üéâ Deployment notification sent to Telegram successfully")
                else:
                    self.logger.warning("‚ùå Failed to send deployment notification to Telegram")
            else:
                self.logger.warning("‚ùå Telegram bot not configured - deployment notification skipped")
                
        except Exception as e:
            self.logger.error(f"‚ùå Error sending deployment notification: {e}")
            import traceback
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
    
    async def run_whale_monitoring_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª whale –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        start_time = time.time()
        
        try:
            self.logger.info("Starting whale monitoring cycle")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º whale –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self.whale_monitor:
                self.logger.info("Running whale monitoring...")
                await self.whale_monitor.run_whale_monitoring_cycle()
            else:
                self.logger.warning("Whale monitor not available")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è health check
            if self.health_server:
                self.health_server.update_activity_time()
            
            duration = time.time() - start_time
            self.logger.info(f"Whale monitoring cycle completed in {duration:.2f}s")
            
        except Exception as e:
            self.logger.error(f"Error in whale monitoring cycle: {e}")
            import traceback
            self.logger.error(f"Full traceback: {traceback.format_exc()}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ whale –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.logger.info("Starting BIO Whale Monitor")
        self.running = True
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–ø–ª–æ–µ –≤ Railway
        if os.getenv('RAILWAY_ENVIRONMENT') and self.notification_system:
            await self._send_deployment_notification_async()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = []
        
        # Health check server (–¥–ª—è Railway)
        if self.health_server and os.getenv('PORT'):
            port = int(os.getenv('PORT', 8080))
            self.health_server.port = port
            tasks.append(asyncio.create_task(self.health_server.start_server()))
            self.logger.info(f"Health check server will start on port {port}")
        
        # Whale –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if self.whale_monitor:
            tasks.append(asyncio.create_task(self._run_whale_monitoring()))
        
        if not tasks:
            self.logger.error("No monitors initialized, nothing to do")
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await asyncio.gather(*tasks, return_exceptions=True)
        except Exception as e:
            self.logger.error(f"Error in monitoring: {e}")
        finally:
            self.running = False
    
    async def _run_whale_monitoring(self):
        """–ó–∞–ø—É—Å–∫ whale –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.logger.info("üêã Starting whale monitoring thread")
        
        while self.running:
            try:
                self.logger.info("üêã Running whale monitoring cycle...")
                await self.run_whale_monitoring_cycle()
                self.logger.info("‚úÖ Whale monitoring cycle completed")
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
                from config.whale_config import MONITORING_CONFIG
                check_interval = MONITORING_CONFIG['check_interval']
                self.logger.info(f"‚è∞ Waiting {check_interval} seconds until next whale check")
                await asyncio.sleep(check_interval)
                
            except Exception as e:
                self.logger.error(f"‚ùå Error in whale monitoring: {e}")
                import traceback
                self.logger.error(f"Whale monitoring traceback: {traceback.format_exc()}")
                self.logger.info("üîÑ Retrying whale monitoring in 60 seconds...")
                await asyncio.sleep(60)
    
    def run_test_mode(self):
        """–ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        self.logger.info("Running in test mode")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            stats = self.database.get_database_stats()
            database_type = "PostgreSQL" if hasattr(self.database, 'connection_pool') else "SQLite"
            self.logger.info(f"Database test successful ({database_type}): {stats}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω BIO —Ç–æ–∫–µ–Ω–æ–≤
            from utils.price_utils import get_bio_token_price, format_price
            
            bio_price = get_bio_token_price('ethereum')
            self.logger.info(f"BIO token price: {format_price(bio_price)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é whale –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if self.whale_monitor:
                whale_stats = self.whale_monitor.get_monitoring_stats()
                self.logger.info(f"Whale monitoring stats: {whale_stats}")
            
            self.logger.info("‚úÖ Test mode completed successfully")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Test mode failed: {e}")
            import traceback
            self.logger.error(f"Test traceback: {traceback.format_exc()}")
            return False
    
    async def run_test_alerts_mode(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        self.logger.info("Running alert testing mode with Telegram notifications")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if self.notification_system:
                self.logger.info("Testing notification system...")
                
                # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
                telegram_results = await self.notification_system.test_notifications()
                self.logger.info(f"Telegram test results: {telegram_results}")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
                
                # 1. –¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                test_transaction = {
                    'dao_name': 'VitaDAO',
                    'amount_usd': 15000.50,
                    'tx_hash': '4x8Zn2kP9rF5tM3qW7yE1L6sB8vC9dH0jN4oQ2aR7uY3mK5xG1',
                    'timestamp': datetime.now(),
                    'blockchain': 'solana',
                    'token_symbol': 'VITA',
                    'amount': 1500000.0,
                    'tx_type': 'outgoing',
                    'from_address': 'GTuVLSN4cKvrWnWFbyyQX6VW14SLhfu7sjM4MrzFoj3s',
                    'to_address': '9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM'
                }
                
                success1 = await self.notification_system.send_transaction_alert(test_transaction)
                self.logger.info(f"Transaction alert sent to Telegram: {'‚úÖ SUCCESS' if success1 else '‚ùå FAILED'}")
                
                # 2. –¢–µ—Å—Ç–æ–≤—ã–π —Ü–µ–Ω–æ–≤–æ–π –∞–ª–µ—Ä—Ç
                test_price_alert = {
                    'alert_type': 'price_drop',
                    'dao_name': 'VitaDAO',
                    'token_symbol': 'VITA',
                    'title': 'Price Drop Alert - VITA',
                    'message': 'VITA price dropped 8.5% in 1h',
                    'change_percentage': -8.5,
                    'period_hours': 1,
                    'blockchain': 'ethereum',
                    'token_address': '0x81f8f0bb1cB2A06649E51913A151F0E7Ef6FA321',
                    'timestamp': datetime.now()
                }
                
                success2 = await self.notification_system.send_price_alert(test_price_alert)
                self.logger.info(f"Price alert sent to Telegram: {'‚úÖ SUCCESS' if success2 else '‚ùå FAILED'}")
                
                # 3. –¢–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏
                success3 = await self.notification_system.send_daily_summary()
                self.logger.info(f"Daily summary sent to Telegram: {'‚úÖ SUCCESS' if success3 else '‚ùå FAILED'}")
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                passed_tests = sum([success1, success2, success3])
                total_tests = 3
                
                self.logger.info(f"Telegram alert testing completed: {passed_tests}/{total_tests} tests passed")
                
                if passed_tests > 0:
                    self.logger.info("üéâ Telegram notifications are working!")
                    return True
                else:
                    self.logger.warning("‚ùå No Telegram notifications were sent")
                    return False
            else:
                self.logger.error("Notification system not initialized")
                return False
                
        except Exception as e:
            self.logger.error(f"Alert test mode failed: {e}")
            return False
    
    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("=== BIO WHALE MONITOR STATUS ===")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        print_whale_monitoring_summary()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if self.database:
            stats = self.database.get_database_stats()
            database_type = "PostgreSQL" if hasattr(self.database, 'connection_pool') else "SQLite"
            print(f"\nDatabase ({database_type}) Statistics:")
            print(f"  Treasury transactions: {stats.get('treasury_transactions', 0)}")
            print(f"  Pool activities: {stats.get('pool_activities', 0)}")
            print(f"  Balance snapshots: {stats.get('balance_snapshots', 0)}")
            print(f"  Alerts: {stats.get('alerts', 0)}")
            print(f"  Database size: {stats.get('database_size_mb', 0):.2f} MB")
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
        print(f"\nMonitor Status:")
        print(f"  Whale Monitor: {'‚úì Active' if self.whale_monitor else '‚úó Disabled'}")
        print(f"  Health Check Server: {'‚úì Available' if self.health_server else '‚úó Disabled'}")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        print(f"\nEnvironment Variables:")
        print(f"  ETHEREUM_RPC_URL: {'‚úì Set' if self.ethereum_rpc_url else '‚úó Not set'}")
        print(f"  RAILWAY_ENVIRONMENT: {'‚úì Set' if os.getenv('RAILWAY_ENVIRONMENT') else '‚úó Not set'}")
        print(f"  PORT: {'‚úì Set' if os.getenv('PORT') else '‚úó Not set'}")

    def finalize_shutdown(self):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.logger.info("Finalizing shutdown...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
        if self.whale_monitor:
            # Whale monitor –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
            pass
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if self.database:
            if hasattr(self.database, 'close'):
                self.database.close()
        
        self.logger.info("Shutdown completed")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.initialize_database()
            self.initialize_monitors()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            parser = argparse.ArgumentParser()
            parser.add_argument('--mode', choices=['monitor', 'test', 'status', 'test-alerts'], default='monitor')
            args, unknown = parser.parse_known_args()
            
            mode = args.mode
            
            self.logger.info(f"Running in mode: {mode}")
            
            if mode == 'test':
                success = self.run_test_mode()
                if not success:
                    raise Exception("Test mode failed")
                    
            elif mode == 'test-alerts':
                success = await self.run_test_alerts_mode()
                if not success:
                    raise Exception("Alert test mode failed")
                    
            elif mode == 'status':
                self.show_status()
                
            elif mode == 'monitor':
                await self.start_monitoring()
            
        except KeyboardInterrupt:
            self.logger.info("Application interrupted by user")
        except Exception as e:
            self.logger.error(f"Fatal error: {e}")
            raise
        finally:
            self.finalize_shutdown()

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return {
        'database_path': 'dao_treasury_monitor.db',
        'check_interval': 30,  # —Å–µ–∫—É–Ω–¥—ã
        'helius_api_key': 'd4af7b72-f199-4d77-91a9-11d8512c5e42',
        'log_level': 'INFO'
    }

def get_coingecko_api_key() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ CoinGecko API –∫–ª—é—á–∞"""
    return os.getenv('COINGECKO_API_KEY', 'CG-9MrJcucBMMx5HKnXeVBD8oSb')

def get_helius_api_key() -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Helius API –∫–ª—é—á–∞"""
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv('HELIUS_API_KEY')
    if api_key:
        return api_key
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    return 'd4af7b72-f199-4d77-91a9-11d8512c5e42'

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='BIO Whale Monitor')
    parser.add_argument('--mode', choices=['monitor', 'test', 'status', 'test-alerts'], 
                       default='monitor', help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
    parser.add_argument('--log-level', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'], 
                       default='INFO', help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--log-file', help='–§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤')
    parser.add_argument('--config', help='–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.log_level, args.log_file)
    logger = logging.getLogger('main')
    
    logger.info("Starting BIO Whale Monitor")
    logger.info(f"Mode: {args.mode}")
    logger.info(f"Log level: {args.log_level}")
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        config['log_level'] = args.log_level
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = BIOWhaleMonitorApp(config)
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        asyncio.run(app.run())
        
    except Exception as e:
        logger.error(f"Application failed to start: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 