#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL
–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –≤ Railway PostgreSQL
"""

import os
import sqlite3
import logging
from datetime import datetime
from database.database import DAOTreasuryDatabase
from database.postgresql_database import PostgreSQLDatabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_data():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ PostgreSQL"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π SQLite
    sqlite_db = DAOTreasuryDatabase()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway PostgreSQL
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        logger.error("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return False
    
    postgresql_db = PostgreSQLDatabase(database_url)
    
    try:
        # –ú–∏–≥—Ä–∞—Ü–∏—è treasury_transactions
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é treasury_transactions...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ SQLite
        conn = sqlite3.connect(sqlite_db.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM treasury_transactions")
        transactions = cursor.fetchall()
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ SQLite")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(treasury_transactions)")
        columns = [row[1] for row in cursor.fetchall()]
        
        migrated_count = 0
        skipped_count = 0
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        for transaction in transactions:
            tx_data = dict(zip(columns, transaction))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ PostgreSQL
            if postgresql_db.is_transaction_processed(tx_data['tx_hash']):
                logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {tx_data['tx_hash']}")
                skipped_count += 1
                continue
            
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            success = postgresql_db.save_treasury_transaction(tx_data)
            if success:
                migrated_count += 1
                logger.debug(f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞: {tx_data['tx_hash']}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞: {tx_data['tx_hash']}")
        
        conn.close()
        
        logger.info(f"üí∞ Treasury Transactions: {migrated_count} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ, {skipped_count} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è alerts
        logger.info("üö® –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é alerts...")
        
        conn = sqlite3.connect(sqlite_db.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM alerts")
        alerts = cursor.fetchall()
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤ –≤ SQLite")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã alerts
        cursor.execute("PRAGMA table_info(alerts)")
        alert_columns = [row[1] for row in cursor.fetchall()]
        
        alert_migrated = 0
        alert_skipped = 0
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∂–¥—ã–π –∞–ª–µ—Ä—Ç
        for alert in alerts:
            alert_data = dict(zip(alert_columns, alert))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç –≤ PostgreSQL
            try:
                success = postgresql_db.save_alert(alert_data)
                if success:
                    alert_migrated += 1
                else:
                    alert_skipped += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∞–ª–µ—Ä—Ç–∞: {e}")
                alert_skipped += 1
        
        conn.close()
        
        logger.info(f"üö® Alerts: {alert_migrated} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ, {alert_skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è token_prices
        logger.info("üíé –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é token_prices...")
        
        conn = sqlite3.connect(sqlite_db.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM token_prices")
        prices = cursor.fetchall()
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(prices)} –∑–∞–ø–∏—Å–µ–π —Ü–µ–Ω –≤ SQLite")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã token_prices
        cursor.execute("PRAGMA table_info(token_prices)")
        price_columns = [row[1] for row in cursor.fetchall()]
        
        price_migrated = 0
        price_skipped = 0
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ü–µ–Ω—ã –ø–∞–∫–µ—Ç–∞–º–∏
        for price in prices:
            price_data = dict(zip(price_columns, price))
            
            try:
                success = postgresql_db.save_token_price(
                    price_data['token_symbol'],
                    float(price_data['price_usd']),
                    price_data['source']
                )
                if success:
                    price_migrated += 1
                else:
                    price_skipped += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ü–µ–Ω—ã: {e}")
                price_skipped += 1
        
        conn.close()
        
        logger.info(f"üíé Token Prices: {price_migrated} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ, {price_skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"üìä –ò—Ç–æ–≥–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ:")
        logger.info(f"  üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {migrated_count}")
        logger.info(f"  üö® –ê–ª–µ—Ä—Ç—ã: {alert_migrated}")
        logger.info(f"  üíé –¶–µ–Ω—ã: {price_migrated}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def check_migration_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    # SQLite —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    sqlite_db = DAOTreasuryDatabase()
    
    conn = sqlite3.connect(sqlite_db.db_path)
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM treasury_transactions")
    sqlite_tx_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM alerts")
    sqlite_alerts_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM token_prices")
    sqlite_prices_count = cursor.fetchone()[0]
    
    conn.close()
    
    # PostgreSQL —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        logger.error("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return
    
    try:
        import psycopg2
        pg_conn = psycopg2.connect(database_url)
        pg_cursor = pg_conn.cursor()
        
        pg_cursor.execute("SELECT COUNT(*) FROM treasury_transactions")
        result = pg_cursor.fetchone()
        pg_tx_count = result[0] if result else 0
        
        pg_cursor.execute("SELECT COUNT(*) FROM alerts")
        result = pg_cursor.fetchone()
        pg_alerts_count = result[0] if result else 0
        
        pg_cursor.execute("SELECT COUNT(*) FROM token_prices")
        result = pg_cursor.fetchone()
        pg_prices_count = result[0] if result else 0
        
        pg_conn.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        pg_tx_count = pg_alerts_count = pg_prices_count = "N/A"
    
    # –û—Ç—á–µ—Ç
    logger.info("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏:")
    logger.info("="*50)
    logger.info(f"SQLite (–ª–æ–∫–∞–ª—å–Ω–∞—è):")
    logger.info(f"  üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {sqlite_tx_count}")
    logger.info(f"  üö® –ê–ª–µ—Ä—Ç—ã: {sqlite_alerts_count}")
    logger.info(f"  üíé –¶–µ–Ω—ã: {sqlite_prices_count}")
    logger.info("")
    logger.info(f"PostgreSQL (Railway):")
    logger.info(f"  üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {pg_tx_count}")
    logger.info(f"  üö® –ê–ª–µ—Ä—Ç—ã: {pg_alerts_count}")
    logger.info(f"  üíé –¶–µ–Ω—ã: {pg_prices_count}")
    logger.info("="*50)

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "status":
        check_migration_status()
    else:
        print("üöÄ DAO Treasury Monitor - Data Migration")
        print("=====================================")
        print("–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL")
        print("")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏
        print("üìä –°—Ç–∞—Ç—É—Å –î–û –º–∏–≥—Ä–∞—Ü–∏–∏:")
        check_migration_status()
        print("")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = input("ü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ")
        if response.lower() in ['y', 'yes', '–¥–∞']:
            success = migrate_data()
            
            if success:
                print("")
                print("üìä –°—Ç–∞—Ç—É—Å –ü–û–°–õ–ï –º–∏–≥—Ä–∞—Ü–∏–∏:")
                check_migration_status()
            else:
                print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        else:
            print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞") 